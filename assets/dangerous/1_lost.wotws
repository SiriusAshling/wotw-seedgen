!include("difficulty_select")
!use("difficulty_select", critical)
!include("easter_eyestone")
!use("easter_eyestone", time_message_seen)

!include("items")
!use("items", spirit_light_40)
!use("items", spirit_light_60)
!use("items", energy_fragment)
!use("items", door_leaf)
!use("items", eyestone)
!use("items", gorlek_ore_pre_shuriken)
!use("items", ability_cell)

!state(torch_hint, Boolean)

// ~ Area: Cave ~

// TODO on tick doesn't work
on tick if is_in_hitbox(-644, -4390, -632, -4381) store(torch_hint, true)
on torch_hint item_message("You hear #fire crackling# nearby...")

on swampStateGroup.torchHolded {
    store(swampStateGroup.torchHolded, false)
    store_without_triggers(torch_hint, true)
}
on MarshSpawn.RockHC || MarshSpawn.LogBroken store(gladesProjects.spiritWellBuilt, true)

on MarshSpawn.RockHC energy_fragment()
on MarshSpawn.ResilienceShard energy_fragment()
on MarshSpawn.FightRoomEX energy_fragment()
on MarshSpawn.CaveKS {
    energy_fragment()
    item_message("Tokk's Keystone")
}

on MarshSpawn.FirstPickupEX {
    set_string("name", spirit_light_string(40))
    spirit_light_40()
}
on MarshSpawn.BridgeEX {
    set_string("name", spirit_light_string(40))
    spirit_light_40()
}
on MarshSpawn.PreLupoEX {
    set_string("name", spirit_light_string(40))
    spirit_light_40()
}
on MarshSpawn.LeftTokkEX {
    set_string("name", spirit_light_string(40))
    spirit_light_40()
}
on MarshSpawn.TokkKeystoneQuest {
    if critical {
        set_string("name", spirit_light_string(40))
        spirit_light_40()
    }
    if critical == false door_leaf()
}

// ~ Area: Mill View ~

on MarshPastOpher.BowTree {
    priority_message(
        "You are not alone on this journey. Through the light of *Ancestral Trees* we will speak to you.\n" +
        "I shall lend you a $leaf fallen late$ to open a gate...",
        10
    )
    door_leaf()
}

on MarshPastOpher.CombatShrine {
    if critical door_leaf()
    if critical == false {
        item_message("@Thorn@")
        store(shards.thorn, true)
    }
}

on MarshPastOpher.BowEC energy_fragment()
on MarshPastOpher.TrialEC energy_fragment()
on MarshPastOpher.TrialHC energy_fragment()
on MarshPastOpher.TrialLeftEX energy_fragment()

on MarshPastOpher.SwingPoleEX {
    set_string("name", spirit_light_string(40))
    spirit_light_40()
}
on MarshPastOpher.TrialOre {
    set_string("name", spirit_light_string(40))
    spirit_light_40()
}
on MarshPastOpher.RightEyestone {
    set_string("name", spirit_light_string(40))
    spirit_light_40()
}

// ~ Area: Den ~

on MarshSpawn.RegenTree {
    priority_message(
        "Enter the Depths of the #Den below#, for you will have to #prove your courage#.\n" +
        "I shall lend you a *piece of my bark* to fend off the dark...",
        10
    )
    item_message("*Spirit Edge*")
    store(skills.sword, true)
    store_without_triggers(swampStateGroup.torchHolded, true)
}

on HowlsDen.CombatShrine {
    if critical ability_cell()
    if critical == false gorlek_ore_pre_shuriken()
}

on HowlsDen.LaserKS eyestone()
on HowlsDen.LeftHC eyestone()

on HowlsDen.MagnetShard door_leaf()
on HowlsDen.DoubleJumpTree {
    priority_message(
        "Here deep below the ground you will find the way ahead.\n" +
        "Now #climb back to the surface#, for you will have to @prove your strength@\n" +
        "I shall lend you a $leaf fallen late$ to open a gate...",
        10
    )
    door_leaf()
}

on MarshSpawn.RecklessShard energy_fragment()
on HowlsDen.UpperEX energy_fragment()
on HowlsDen.RightHC energy_fragment()
on HowlsDen.AboveDoorKS energy_fragment()
on HowlsDen.DoubleJumpEX energy_fragment()
on HowlsDen.StickyShard energy_fragment()

on HowlsDen.AboveTPEX {
    set_string("name", spirit_light_string(40))
    spirit_light_40()
}

on HowlsDen.SwordTree {
    priority_message(
        "Long years have passed since the *Light Ceremony* last filled these hollows.\n" +
        "Step carefully, for you will have to *prove your wisdom*\n" +
        "I shall #lift the haze# that darkened this place...",
        10
    )
    store(MarshSpawn.LupoMap, false)
}

// ~ Area: Daylight Marsh ~

on MarshSpawn.BashEC gorlek_ore_pre_shuriken()
on MarshSpawn.LeverEC gorlek_ore_pre_shuriken()
on MarshSpawn.LifepactShard {
    if critical gorlek_ore_pre_shuriken()
    if critical == false {
        if skills.glide item_message("Broken Hammer")
        if skills.glide == false {
            item_message("#Hammer#")
            store(skills.hammer, true)
        }
    }
}

on MarshSpawn.CaveOre energy_fragment()

on MarshSpawn.FangQI {
    set_string("name", spirit_light_string(40))
    spirit_light_40()
    item_message("Howl Fang")
}
on MarshSpawn.MokkFangQuest {
    set_string("name", spirit_light_string(40))
    spirit_light_40()
}
on MarshPastOpher.TrialRightEX {
    set_string("name", spirit_light_string(40))
    spirit_light_40()
}

// ~ Area: West Hollow ~

on WestHollow.CrusherHC energy_fragment()

on WestHollow.BelowLupoEX gorlek_ore_pre_shuriken()
on WestHollow.AboveDashEX {
    if skills.sword gorlek_ore_pre_shuriken()
    if skills.sword == false item_message(". . .")
}

on WestHollow.FarLeftEX {
    set_string("name", spirit_light_string(60))
    spirit_light_60()
}
on WestHollow.RockPuzzleEX {
    set_string("name", spirit_light_string(60))
    spirit_light_60()
}
on WestHollow.HiddenEC {
    set_string("name", spirit_light_string(60))
    spirit_light_60()
}
on WestHollow.TrialHC {
    set_string("name", spirit_light_string(60))
    spirit_light_60()
}
on WestHollow.CrusherEX {
    if skills.sword {
        set_string("name", spirit_light_string(60))
        spirit_light_60()
    }
    if skills.sword == false item_message(". . .")
}
on WestHollow.QuickshotShard {
    set_string("name", spirit_light_string(60))
    spirit_light_60()
}

on WestHollow.DashRightEX {
    if skills.sword {
        if critical && skills.shuriken item_message("<purple>Withered Seed</>")
        if critical == false || skills.shuriken == false {
            item_message("$Mysterious Seed$")
            store_without_triggers(hubUberStateGroup.gardenerProjectGrapplePlants, 1)
        }
    }
    if skills.sword == false item_message(". . .")
}

on WestHollow.DashTree {
    if skills.sword {
        if critical priority_message(
            "The way ahead may not always be clear, but never despair.\n" +
            "Whatever I may have been able to give you, I have since lost...",
            10
        )
        if critical == false {
            priority_message(
                "The way ahead may not always be clear, but never despair.\n" +
                "I shall lend you this #shard shaped within my roots# to aid your path through the woods...",
                10
            )
            item_message("*Deflector*")
            store(shards.deflector, true)
        }
    }
    if skills.sword == false {
        priority_message(
            "3131113231\nThis code may be helpful... #in time#.",
            10
        )
        store(time_message_seen, true)
    }
}

// ~ Area: East Hollow ~

on EastHollow.BashHC {
    if critical shuriken()
    if critical == false gorlek_ore_pre_shuriken()
}

on EastHollow.BashTree {
    if critical {
        priority_message(
            "Each step and stone will reveal another piece - of the power that #lies in you#.\n" +
            "I shall lend you this #shard shaped within my roots# to aid your path through the woods...",
            10
        )
        item_message("*Energy Harvest*")
        store(shards.energyHarvest, true)
    }
    if critical == false {
        priority_message(
            "Each step and stone will reveal another piece - of the power that #lies in you#.\n" +
            "I shall #drain the poison# that fills this Hollow to ease the task you have to follow...",
            10
        )
        store(kwolokGroupDescriptor.recedingWaterSetup, 2)
    }
}

on EastHollow.SecretRoofEX gorlek_ore_pre_shuriken()
on EastHollow.MortarEX gorlek_ore_pre_shuriken()

on EastHollow.SplinterShard {
    if critical {
        set_string("name", spirit_light_string(60))
        spirit_light_60()
    }
    if critical == false shuriken()
}

fun shuriken() {
    // TODO this doesn't work like it used to
    item_message_with_timeout("*Chapter 2* - Strength", 7.5)
    item_message_with_timeout("*Shuriken*", 5)
    store(skills.shuriken, true)
}
