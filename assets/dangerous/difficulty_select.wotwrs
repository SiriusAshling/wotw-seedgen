!include("bind_pointer")
// TODO maybe accept any amount of identifiers on use?
!use("bind_pointer", bind_pointer)
!use("bind_pointer", select_difficulty)
!use("bind_pointer", confirm_balanced)
!use("bind_pointer", confirm_critical)
!include("timer")
!use("timer", timer_active)
!use("timer", timer)
!use("timer", start_timer)
!use("timer", spawn_timer)

!state(critical, Boolean)
!share(critical)

!share(difficulty_menu)
fun difficulty_menu() {
    free_message(
        "active_message",
        "$Select a difficulty$\n" +
        "#Balanced#                   @Critical@\n" +
        "[Binding1]        [Binding2]"
    )
    store(bind_pointer, select_difficulty)
}
// TODO there were ordering issues here, check other menues if they have the same problem
on binding_1 {
    set_integer("bind_pointer", bind_pointer)
    if get_integer("bind_pointer") == select_difficulty {
        destroy_message("active_message")
        free_message(
            "active_message",
            "#Balanced#\n" +
            "There will be a difficulty curve and multiple paths to progress.\n" +
            "$Confirm$                   @Go back@\n" +
            "[Binding1]        [Binding2]"
        )
        store(bind_pointer, confirm_balanced)
    }
    if get_integer("bind_pointer") == confirm_balanced {
        destroy_message("active_message")
        start()
    }
    if get_integer("bind_pointer") == confirm_critical {
        destroy_message("active_message")
        store(critical, true)
        start()
    }
}
on binding_2 {
    set_integer("bind_pointer", bind_pointer)
    if get_integer("bind_pointer") == select_difficulty {
        destroy_message("active_message")
        free_message(
            "active_message",
            "@Critical@\n" +
            "A challenge with no restraints. It is recommended to finish Balanced first\n" +
            "$Confirm$                   @Go back@\n" +
            "[Binding1]        [Binding2]"
        )
        store(bind_pointer, confirm_critical)
    }
    if get_integer("bind_pointer") == confirm_balanced {
        destroy_message("active_message")
        difficulty_menu()
    }
    if get_integer("bind_pointer") == confirm_critical {
        destroy_message("active_message")
        difficulty_menu()
    }
}

// TODO check the exact message timing again

fun start() {
    store(bind_pointer, 0)
    store(LowerReach.KeystoneDoor, true)
    store_without_triggers(MarshSpawn.LupoMap, true)
    store(inkwaterMarshStateGroup.mokiTorchPlayed, false)
    store(swampStateGroup.torchHolded, false)
    store(randoConfig.allowOpeningEyestoneDoor, false)
    store(WestHollow.PurpleDoorOpen, true)
    store(gladesProjects.spiritWellBuilt, false)
    // TODO how to make it available, but not completed?
    store(gladesProjects.beautifyBuilt, false)
    // TODO weird that these aren't used...
    // they should probably at least be hidden then
    store(LupoShop.ShardMapIcon, 1)
    store(LupoShop.ECMapIcon, 1)
    store(LupoShop.HCMapIcon, 1)
    store(swampStateGroup.finishedIntroTop, false)
    warp(-799, -4310) // TODO preload
    priority_message("@It's Dangerous to go Alone@\nby SiriusAshling", 10.33)
    set_integer("timer", spawn_timer)
    start_timer()
}
on timer > 10.33 if get_integer("timer") == spawn_timer {
    set_string("difficulty_change", "")
    if critical && gameStateGroup.gameDifficultyMode < 2 {
        store(gameStateGroup.gameDifficultyMode, 2)
        set_string("difficulty_change", "Difficulty changed to @Hard@\n")
    }
    if critical == false && gameStateGroup.gameDifficultyMode > 1 {
        store(gameStateGroup.gameDifficultyMode, 1)
        set_string("difficulty_change", "Difficulty changed to #Normal#\n")
    }
    priority_message(
        "#Rules#\n" +
        "No Ori Out of Bounds, No Pause Hover\n" +
        get_string("difficulty_change") +
        "$Good luck!$",
        10.33
    )
}
on timer > 20.67 if get_integer("timer") == spawn_timer {
    item_message_with_timeout("*Chapter 1* - Lost", 7.5)
    store(timer_active, false)
}
