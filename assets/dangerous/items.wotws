!include("difficulty_select")
!use("difficulty_select", critical)

!include("ability_cells")
!use("ability_cells", ability_cell)
!share(ability_cell)

!include("mapstone_fragments")
!use("mapstone_fragments", mapstone_fragment)
!share(mapstone_fragment)

!state(door_leaf_explained, Boolean)
!state(eyestone_collected, Boolean)
!state(shiny_ore_collected, Integer)

!include("reset")
!on_callback("reset", reset, {
    store(eyestone_collected, false)
    store(shiny_ore_collected, 0)
})

// TODO great use case for function arguments
!share(grant_spirit_light)
fun grant_spirit_light() {
    item_message("#" + get_string("name") + "#")
    store(player.spiritLight, fetch(player.spiritLight) + get_integer("amount"))
}
!share(spirit_light_1)
fun spirit_light_1() {
    set_integer("amount", 1)
    grant_spirit_light()
}
!share(spirit_light_40)
fun spirit_light_40() {
    set_integer("amount", 40)
    grant_spirit_light()
}
!share(spirit_light_60)
fun spirit_light_60() {
    set_integer("amount", 60)
    grant_spirit_light()
}
!share(spirit_light_80)
fun spirit_light_80() {
    set_integer("amount", 80)
    grant_spirit_light()
}
!share(spirit_light_100)
fun spirit_light_100() {
    set_integer("amount", 100)
    grant_spirit_light()
}
!share(spirit_light_120)
fun spirit_light_120() {
    set_integer("amount", 120)
    grant_spirit_light()
}
!share(spirit_light_500)
fun spirit_light_500() {
    set_integer("amount", 500)
    grant_spirit_light()
}
!share(spirit_light_100_or_120_amount)
fun spirit_light_100_or_120_amount() {
    if critical set_integer("amount", 100)
    if critical == false set_integer("amount", 120)
}
!share(spirit_light_120_or_100_amount)
fun spirit_light_120_or_100_amount() {
    if critical set_integer("amount", 120)
    if critical == false set_integer("amount", 100)
}
!share(energy_fragment)
fun energy_fragment() {
    item_message("*Energy Fragment*")
    store(player.maxEnergy, fetch(player.maxEnergy) + 0.5)
    store(player.energy, player.maxEnergy)
}
!share(health_fragment)
fun health_fragment() {
    item_message("$Health Fragment$")
    store(player.maxHealth, fetch(player.maxHealth) + 5)
    store(player.health, player.maxHealth)
}

!share(door_leaf)
fun door_leaf() {
    if door_leaf_explained set_string("door_leaf_explanation", "")
    if door_leaf_explained == false {
        set_string("door_leaf_explanation", "\n(Keystone)")
        store(door_leaf_explained, true)
    }
    item_message("$Door Leaf$" + get_string("door_leaf_explanation"))
    store(player.keystones, fetch(player.keystones) + 1)
}

!share(eyestone)
fun eyestone() {
    if eyestone_collected {
        item_message("*Eyestone* $(2/2)$")
        store(player.keystones, fetch(player.keystones) + 2)
        store(randoConfig.allowOpeningEyestoneDoor, true)
    }
    if eyestone_collected == false {
        item_message("*Eyestone* (1/2)")
        store(eyestone_collected, true)
    }
}

// TODO remove notes
// 58: torch
// 61: sword
// 64: shuriken
// 67: water
// 70: djump
fun gorlek_ore() {
    store(player.gorlekOre, fetch(player.gorlekOre) + 1)
    if get_boolean("shiny") store(shiny_ore_collected, shiny_ore_collected + 1)
    set_string("ore", "@Gorlek Ore@")
    if get_boolean("shiny") set_string("ore", get_string("ore") + "#Â°#")
    set_string("color", "")
    if randoStats.oreCollected >= 39 set_string("color", "$")
    set_string("ore", get_string("ore") + " " + get_string("color") + "(" + randoStats.oreCollected + "/39)" + get_string("color"))
    if get_boolean("shiny") set_string("ore", get_string("ore") + " #(" + shiny_ore_collected + ")#")
    item_message(get_string("ore"))
}
!share(gorlek_ore_pre_shuriken)
fun gorlek_ore_pre_shuriken() {
    set_boolean("shiny", critical && skills.shuriken == false)
    gorlek_ore()
}
!share(gorlek_ore_pre_water)
fun gorlek_ore_pre_water() {
    set_boolean("shiny", critical && randoState.cleanWater == false)
    gorlek_ore()
}
!share(gorlek_ore_pre_double_jump)
fun gorlek_ore_pre_double_jump() {
    set_boolean("shiny", critical && skills.doubleJump == false)
    gorlek_ore()
}
!share(gorlek_ore_endgame)
fun gorlek_ore_endgame() {
    set_boolean("shiny", true)
    gorlek_ore()
}

!share(unknown_resource)
fun unknown_resource() {
    item_message("Unknown Resource Type 5")
}

// TODO why share both this and spirit light 500
!share(spirit_trial_reward)
fun spirit_trial_reward() {
    spirit_light_500()
    if critical == false {
        health_fragment()
        health_fragment()
    }
}
