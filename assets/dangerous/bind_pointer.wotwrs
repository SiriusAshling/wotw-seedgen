!include("progress_helper")
!use("progress_helper", disable_keybinds)

// The bind pointers are used to store what should happen when pressing a keybind, usually this means which message to show next
// The counter setup below is used to ensure no duplicates are used
!state(bind_pointer, Integer)
!share(bind_pointer)

!let(counter, 1)
!let(close, counter)
!share(close)

!let(counter, counter + 1)
!let(shops_explanation_next, counter)
!share(shops_explanation_next)

!let(counter, counter + 1)
!let(select_difficulty, counter)
!share(select_difficulty)

!let(counter, counter + 1)
!let(confirm_balanced, counter)
!share(confirm_balanced)

!let(counter, counter + 1)
!let(confirm_critical, counter)
!share(confirm_critical)

!let(counter, counter + 1)
!let(shop_shuriken_efficiency, counter)
!share(shop_shuriken_efficiency)

!let(counter, counter + 1)
!let(shop_shuriken_upgrade, counter)
!share(shop_shuriken_upgrade)

!let(counter, counter + 1)
!let(shop_ancestral_light, counter)
!share(shop_ancestral_light)

!let(counter, counter + 1)
!let(shop_pendant, counter)
!share(shop_pendant)

on change bind_pointer set_integer("bind_pointer_backup", bind_pointer)
on respawn store(bind_pointer, get_integer("bind_pointer_backup")) // TODO can you trick this if there's a frame or so where it's on the wrong value?
on reload store(bind_pointer, get_integer("bind_pointer_backup"))

on bind_pointer == 0 {
    store(player.inputLocked, false)
    store(disable_keybinds, false)
}
on bind_pointer > 0 {
    store(player.inputLocked, true)
    store(disable_keybinds, true)
}

on binding_1 if bind_pointer == close {
    destroy_message("active_message")
    store(bind_pointer, 0)
}
