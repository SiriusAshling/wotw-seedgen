!state(timer, Float)
!state(timer_active, Boolean)
on reload {
    define_timer(timer_active, timer)
    store(timer_active, true)
    store(timer, 0)
    free_message("msg", "")
    set_integer("direction", 1)
}

!let(speed, 100)
!let(max, 16 * 16)

on change timer {
    set_integer("dec", to_integer(timer * speed))
    if get_integer("dec") > max * 2 {
        store_without_triggers(timer, 0)
        set_integer("dec", 0)
    }
    set_string("ooo", "eeee")
    if get_integer("dec") > max {
        set_integer("dec", max * 2 - get_integer("dec"))
        set_string("ooo", "oooo")
    }
    to_hex()
    set_string("color", get_string("hex"))
    // TODO have to be quite explicit here
    set_message_text("msg", "<hex_8888" + get_string("color") + "ff><s_3>W</>" + get_string("ooo"))
}

fun to_hex() {
    set_integer("dividend", get_integer("dec"))
    set_integer("divisor", 16)
    remainder()
    set_integer("char", get_integer("return"))
    hex_char()
    set_string("digit", get_string("hex"))
    set_integer("char", get_integer("dec") / 16)
    hex_char()
    set_string("hex", get_string("hex") + get_string("digit"))
}

fun hex_char() {
    if get_integer("char") < 10 {
        set_string("hex", get_integer("char"))
    }
    if get_integer("char") == 10 {
        set_string("hex", "a")
    }
    if get_integer("char") == 11 {
        set_string("hex", "b")
    }
    if get_integer("char") == 12 {
        set_string("hex", "c")
    }
    if get_integer("char") == 13 {
        set_string("hex", "d")
    }
    if get_integer("char") == 14 {
        set_string("hex", "e")
    }
    if get_integer("char") == 15 {
        set_string("hex", "f")
    }
}

// TODO add in client
fun remainder() {
    set_boolean("continue", get_integer("dividend") >= get_integer("divisor"))
    if get_boolean("continue") == false {
        set_integer("return", get_integer("dividend"))
    }
    if get_boolean("continue") {
        set_integer("dividend", get_integer("dividend") - get_integer("divisor"))
        remainder()
    }
}
